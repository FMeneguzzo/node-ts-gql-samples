# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Client {
  id: String!
  name: String!

  """Sales will be sorted by business date DESC"""
  sales: [Sale!]!
  kpi(from: DateTime, to: DateTime): ClientKPI!
}

type ClientKPI {
  """Sum of all sales value, including returns"""
  salesValue: Float!

  """Number of products sold, returns count as -1"""
  quantity: Int!

  """Percentage of returns on positive product sales"""
  returnRatio: Float!
}

enum ClientsSortOptionEnum {
  ASC
  DESC
}

input CreateSaleInput {
  id: String!
  clientId: String!
  productId: String!

  """
  Only accepts extended ISO 8601 format compliant date. Example: '2020-01-01T00:00:00.000Z'
  """
  businessDateTime: String!
  value: Float!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Mutation {
  createSale(input: CreateSaleInput!): Sale
}

type Product {
  id: String!
  name: String!
  type: ProductTypeEnum!
  price: Float!

  """Sales will be sorted by business date DESC"""
  sales: [Sale!]!
}

enum ProductTypeEnum {
  SMARTWATCH
  SMARTPHONE
  TABLET
  NOTEBOOK
}

type Query {
  userById(id: String!): User
  clientById(id: String!): Client
  clients(start: Int = 0, limit: Int = 3, sortByName: ClientsSortOptionEnum): [Client!]!
  productById(id: String!): Product
  products(types: [ProductTypeEnum!]): [Product!]!

  """Sales will be sorted by business date DESC"""
  sales: [Sale!]!
}

type Sale {
  id: String!
  clientId: String!
  productId: String!
  businessDateTime: String!
  value: Float!
  client: Client
  product: Product
}

type User {
  id: String!
  firstName: String!
  lastName: String!
  gender: UserGenderEnum
  fullName: String!
}

enum UserGenderEnum {
  M
  F
  X
}
